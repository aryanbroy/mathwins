// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}
enum Difficulty {
  EASY
  MEDIUM
  HARD
}
enum TransactionType {
  INCREMENT
  DECREMENT
}
enum TransactionDesciption {
  SINGLE_PLAYER
  DAILY_TROURNAMET
  INSTANT_TROURNAMET
  REFERAL_POINT
}
enum TournamentStatus {
  OPEN
  CLOSED
  FULL
}

model User {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  email         String
  phone         String     @unique
  password      String
  googleId      String     @unique
  role          Role       @default(USER)
  avatarUrl     String?
  points         BigInt     @default(0)
  lifeTimePoints BigInt     @default(0)
  bestScore     BigInt     @default(0)
  coinsToday    BigIn      @default(0)
  level         Int        @default(1)
  lifeline      Lifeline?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Question {
  id            Int        @id @default(autoincrement())
  question      String
  option        String[]?
  answer        Int
  difficulty    Difficulty
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Lifeline {
  id            Int        @id @default(autoincrement())
  user          User       @relation(fields: [userId], references: [id])
  userId        Int        @unique
  fifty         Boolean    @default(false)
  levelDown     Boolean    @default(false)
  extraTime     Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Transaction {
  id            Int                     @id @default(autoincrement())
  user          User                    @relation(fields: [userId], references: [id])
  userId        Int
  amount        Int       
  type          TransactionType
  desciption    TransactionDesciption   @default(0)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
} 

model Leaderboard {
  id            Int        @id @default(autoincrement())
  user          User[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Solo {
  id            Int        @id @default(autoincrement())
  question      Question[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}   

model Dailytournament {
  id            Int        @id @default(autoincrement())
  question      Question[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Instanttournament {
  id            Int              @id @default(autoincrement())
  code          Int
  status        TournamentStatus @default(OPEN)
  question      Question[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}