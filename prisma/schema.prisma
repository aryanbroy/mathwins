// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum TransactionType {
  INCREMENT
  DECREMENT
}

enum TransactionDescription {
  SINGLE_PLAYER
  DAILY_TROURNAMET
  INSTANT_TROURNAMET
  REFERAL_POINT
  REWARD_CLAIM
}

enum TournamentStatus {
  OPEN
  CLOSED
  FULL
  CANCELLED
}

model User {
  id                           Int                           @id @default(autoincrement())
  name                         String
  username                     String                        @unique
  email                        String?
  phone                        String?                       @unique
  password                     String
  googleId                     String?                       @unique
  role                         Role                          @default(USER)
  avatarUrl                    String?
  points                       BigInt                        @default(0)
  lifeTimePoints               BigInt                        @default(0)
  bestScore                    BigInt                        @default(0)
  level                        Int                           @default(1)
  lifeline                     Lifeline?
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  Transaction                  Transaction[]
  historicalLeaderboards       DailyUserLeaderboardFinal[]
  soloAttempts                 SoloAttempt[]
  dailyTournamentAttempts      DailyTournamentAttempt[]
  instantTournamentSubmissions InstantTournamentSubmission[]
  LiveDailyLeaderboard         LiveDailyLeaderboard?
}

model Question {
  id         Int        @id @default(autoincrement())
  question   String
  option     String[]
  answer     Int
  difficulty Difficulty
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Lifeline {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int      @unique
  fiftyUses     Int      @default(1)
  levelDownUses Int      @default(1)
  extraTimeUses Int      @default(0)
  lastReset     DateTime @default(now()) @db.Date
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Transaction {
  id         Int                    @id @default(autoincrement())
  user       User                   @relation(fields: [userId], references: [id])
  userId     Int
  amount     Int
  type       TransactionType
  desciption TransactionDescription
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  @@index([userId])
}

model SoloAttempt {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  score     BigInt
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model DailyTournamentAttempt {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  score     BigInt   @default(0)
  createdAt DateTime @default(now())
  submitedAt DateTime
  @@index([userId, createdAt])
}

model InstantTournamentSubmission {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  score       BigInt
  submittedAt DateTime @default(now())

  @@index([userId, submittedAt])
}

model LiveDailyLeaderboard {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int      @unique
  soloPoints    BigInt   @default(0)
  dailyPoints   BigInt   @default(0)
  instantPoints BigInt   @default(0)
  totalPoints   BigInt   @default(0)
  updatedAt     DateTime @updatedAt

  @@index([totalPoints(sort: Desc)])
}

model DailyUserLeaderboardFinal {
  id                  Int      @id @default(autoincrement())
  user                User     @relation(fields: [userId], references: [id])
  userId              Int
  date                DateTime @db.Date
  totalCoinPoints     BigInt   @default(0)
  finalRank           Int
  createdAt           DateTime @default(now())
  coinPointsBreakdown Json?
  // `Explain how Total point is calculated` coinPointsBreakdown : { "dailyPoints": 120, "instantPointsSum": 310, "soloPointsSum": 150 }

  @@unique([userId, date])
  @@index([date, finalRank(sort: Asc)])
}
